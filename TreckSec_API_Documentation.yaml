openapi: 3.0.0
info:
  version: '2.0'
  title: "TrekSec OpenAPI 3.0"
  description: API for a secure trekking.
  license:
    name: MIT
servers:
  - url: http://localhost:8080/api/v1
    description: Localhost
paths:
  /users:
    post:
      description: >-
        Creates a new user in the system.
      summary: Register a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: 'User created. Link in the Location header'
          headers:
            'Location':
              schema:
                type: string
                description: Link to the newly created user.
        '409':
          description: 'User already exists'
          content:
            application/json:
              schema:
                type: string
                description: User already exists error message.
        '400':
          description: 'Error message sent, with the actual error'
          content:
            application/json:
              schema:
                type: string
                description:  error message.
    get:
      description: >-
        Gets the list of users.
      summary: View all users
      responses:
        '200':
          description: 'Collection of users'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  
  /users/{id}:
    get:
      description: >-
        Get one user by id.
      summary: View a user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'data of a user'
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/User'
    
  /users/{id}/coordinates:
    get:
      description: >-
        Get the users coordinates by the id.
      summary: View a user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'data of a user'
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/User' 
    put:
      description: >-
        update the coordinates of the user
      summary: Update the coordinates
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - coordX
                - coordY
              properties:
                id:
                  type: integer
                  description: 'id of the user'
                coordX:
                  type: string
                  description: 'latitude od the dangers position'
                coordY:
                  type: string
                  description: 'longitude od the dangers position'
      responses:
        '200':
          description: 'Coordinates changed successfully'
          content:
            application/json:
              schema:
                type: string
                description:  Users email
        '404':
          description: 'Error message sent, with the actual error'
          content:
            application/json:
              schema:
                type: string
                description:  User not found
        '500':
          description: 'Si è verificato un errore durante il reset della password. Riprova più tardi'
          content:
            application/json:
              schema:
                type: string
                description:  Internal server error.
                  
  /users/reset-password:
    post:
      description: >-
        gets the mail (used to send an email) to reset the password.
      summary: Send an email
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  description: 'Email address of the student'
      responses:
        '201':
          description: 'Email sent to the user that required the reset assword'
          content:
            application/json:
              schema:
                type: string
                description:  Mail sent message.
        '404':
          description: 'Email not found'
          content:
            application/json:
              schema:
                type: string
                description:  Email not found message.
              
    put:
      description: >-
        update the password of the user
      summary: Update the password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - newPassword
                - newcheckPassword
              properties:
                token:
                  type: string
                  description: 'Token of the user'
                newPassword:
                  type: string
                  description: 'newPassword of the user'
                newcheckPassword:
                  type: string
                  description: 'Newcheck of the users password'
      responses:
        '201':
          description: 'Password changed successfully'
          content:
            application/json:
              schema:
                type: string
                description:  Mail sent message.
        '400':
          description: 'Error message sent, with the actual error'
          content:
            application/json:
              schema:
                type: string
                description:  error message.
        '500':
          description: 'Si è verificato un errore durante il reset della password. Riprova più tardi'
          content:
            application/json:
              schema:
                type: string
                description:  Si è verificato un errore durante il reset della password. Riprova più tardi message.

  /users/telefoni:
    get:
      description: >-
        Gets the list of users and their phones.
      summary: View all users
      responses:
        '200':
          description: 'Collection of users'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  
  /users/telefoni/{telefono}:
    get:
      description: >-
        Get one user by phone number.
      summary: View a user
      parameters:
        - in: path
          name: telefono
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'data of a user'
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/User'
        '404':
          description: 'Error message sent, with the actual error'
          content:
            application/json:
              schema:
                type: string
                description:  no phone number searched.
        '400':
          description: 'Numero di telefono inesistente'
          content:
            application/json:
              schema:
                type: string
                description:  Numero di telefono non valido.

  /admins:
    get:
      description: >-
        Gets the list of admins.
      summary: View all admins
      responses:
        '200':
          description: 'Collection of users'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Admin'
    post:
      description: >-
        Creates a new admin in the system.
      summary: Register a new admin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Admin'
      responses:
        '201':
          description: 'Admin created. Link in the Location header'
          headers:
            'Location':
              schema:
                type: string
              description: Link to the newly created admin.
        '400':
          description: 'The field "email" must be a non-empty string, in email format'
          content:
            application/json:
              schema:
                type: string
                description:  The field email must be a non-empty string, in email format message.
                
  /authentication:
    post:
      description: >-
        authenticate the user
      summary: User authentication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  description: 'Email address of the user'
                password:
                  type: string
                  description: 'Password of the user'
      responses:
        '200':
          description: 'User succesfully authenticated'
          headers:
            'Location':
              schema:
                type: string
              description: Link to the authenticated user.
        '400':
          description: 'Authentication failed. Wrong password.'
          content:
            application/json:
              schema:
                type: string
                description:  Authentication failed. Wrong password.
        '404':
          description: 'User name wrong.'
          content:
            application/json:
              schema:
                type: string
                description:  User name wrong.
  /authenticationAdmin:
    post:
      description: >-
        authenticate the user
      summary: Admin authentication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  description: 'Email address of the admin'
                password:
                  type: string
                  description: 'Password of the admin'
      responses:
        '200':
          description: 'Admin succesfully authenticated'
          headers:
            'Location':
              schema:
                type: string
              description: Link to the authenticated admin.
        '400':
          description: 'Password wrong.'
          content:
            application/json:
              schema:
                type: string
                description:  Password wrong message.
        '404':
          description: 'Admin name wrong.'
          content:
            application/json:
              schema:
                type: string
                description:  Admin name wrong.      
          
  /danger:
    get:
      description: >-
        Gets the list of dangers
      summary: View all dangers
      responses:
        '200':
          description: 'Collection of dangers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Danger'
    post:
      description: >-
        Signaling new danger
      summary: Signaling a new danger
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Danger'
      responses:
        '201':
          description: 'Danger created or number of dangers updated. Link in the Location header'
          headers:
            'Location':
              schema:
                type: string
              description: Link to the newly created danger.
        '500':
          description: 'Error while looking for the danger'
          content:
            application/json:
              schema:
                type: string
                description: Si è verificato un errore durante la ricerca dei pericoli message.
  
  /danger/{id}:
    get:
      description: >-
        Get one danger by id.
      summary: View a danger
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'data of a danger'
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Danger'
        '500':
          description: 'Error while looking for the danger'
          content:
            application/json:
              schema:
                type: string
                description: Si è verificato un errore durante la ricerca dei pericoli message.
    delete:
      description: >-
        Delete one danger by id.
      summary: Delete a danger
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'removed danger succesfully'
        '404':
          description: 'danger not found'
    put:
      description: >-
        add the danger to the map
      summary: Update the coordinates
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: integer
                  description: 'id of the user'
      responses:
        '200':
          description: 'Pericolo aggiunto sulla mappa'
          content:
            application/json:
              schema:
                type: string
                description:  Pericolo aggiunto
        '404':
          description: 'Error message sent, with the actual error'
          content:
            application/json:
              schema:
                type: string
                description:  Pericolo not trovato
                  
  /danger/{type}:
    get:
      description: >-
        Get all dangers by type.
      summary: View all dangers of one type
      parameters:
        - in: path
          name: type
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'array with the same type of danger'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Danger'
        '500':
          description: 'Error while looking for the danger'
          content:
            application/json:
              schema:
                type: string
                description: Si è verificato un errore durante la ricerca dei pericoli message.
    
  
    
  
components:
  schemas:
    User:
      type: object
      required:
        - nomeCognome
        - telefono
        - email
        - password
        - checkPassword
        - token
        - logIn
        - coordX
        - coordY
      properties:
        nomeCognome:
          type: string
          description: 'Name and surname of the user'
        telefono:
          type: string
          description: 'Phone number of the user'
        email:
          type: string
          description: 'Email address of the user'
        password:
          type: string
          description: 'Password of the user'
        checkPassword:
          type: string
          description: 'Check of the users password'
        token:
          type: string
          description: 'token assosiated to the signed user'
        logIn:
          type: boolean
          description: 'Check if user is logged or not'
        coordX:
          type: string
          description: 'longitude coordinate of the user location'
        coordY:
          type: string
          description: 'latitude coordinate of the user location'
    Admin:
      type: object
      required:
        - email
        - password
        - type
      properties:
        email:
          type: string
          description: 'Email address of the user'
        password:
          type: string
          description: 'Password of the user'
        type:
          type: string
          description: 'type of admin'
    Danger:
      type: object
      required:
        - type
        - latitude
        - longitude
        - segnalazioni
        - onMap
      properties:
        type:
          type: string
          description: 'type of the danger'
        latitude:
          type: string
          description: 'latitude od the dangers position'
        longitude:
          type: string
          description: 'longitude od the dangers position'
        segnalazioni:
          type: number
          description: 'number of segnalations'
        onMap:
          type: boolean
          description: 'Check if shown on the map or not'
